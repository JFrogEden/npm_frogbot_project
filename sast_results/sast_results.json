[{"tool":{"driver":{"informationUri":"https://docs.jfrog-applications.jfrog.io/jfrog-security-features/sast","name":"USAF","rules":[{"id":"js-insecure-random","shortDescription":{"text":"Use of Insecure Random"},"fullDescription":{"text":"\n### Overview\nA use of insecure random vulnerability is a type of security flaw that is\ncaused by the use of inadequate or predictable random numbers in a program\nor system. Random numbers are used in many security-related applications,\nsuch as generating cryptographic keys and if the numbers are not truly\nrandom, an attacker may be able to predict or recreate them, potentially\ncompromising the security of the system.\n\n### Vulnerable example\n```javascript\nvar randomNum = Math.random();\n```\n`Math.random` is not secured, as it creates predictable random numbers.\n\n### Remediation\n```diff\nvar randomNum = crypto.randomInt(0, 100)\n```\n`crypto.randomInt` is secured, and creates much less predictable random\nnumbers.\n","markdown":"\n### Overview\nA use of insecure random vulnerability is a type of security flaw that is\ncaused by the use of inadequate or predictable random numbers in a program\nor system. Random numbers are used in many security-related applications,\nsuch as generating cryptographic keys and if the numbers are not truly\nrandom, an attacker may be able to predict or recreate them, potentially\ncompromising the security of the system.\n\n### Vulnerable example\n```javascript\nvar randomNum = Math.random();\n```\n`Math.random` is not secured, as it creates predictable random numbers.\n\n### Remediation\n```diff\nvar randomNum = crypto.randomInt(0, 100)\n```\n`crypto.randomInt` is secured, and creates much less predictable random\nnumbers.\n"},"defaultConfiguration":{"parameters":{"properties":{"CWE":"338"}}},"properties":{"security-severity":"3.9"}},{"id":"js-unsafe-hash","shortDescription":{"text":"Unsafe Hash Algorithm"},"fullDescription":{"text":"\n### Overview\nAn unsafe hash algorithm vulnerability occurs when using a known insecure hash\nalgorithm. A hash algorithm accepts arbitrary input and generates a hash\nvalue - a fixed-length output that can be used to verify the integrity of\ndata, such as passwords or files. An insecure hash algorithm is an\nalgorithm that an attacker can use to generate the same hash value for\ndifferent input data within a reasonable amount of time (\"hash collision\nattack\").\n\n### Vulnerable example\n```javascript\nconst md5 = require(\"md5\")\n\nresult = md5(\"message\")\n```\nIn this example the user uses the weak MD5 hash algorithm.\n\n### Remediation\n```javascript\nconst { createHash } = await import('node:crypto');\n\nconst secret = 'Hi';\nconst hash = createHash('sha256', secret)\n```\nAs a remediation the user can use a SHA256 hashing algorithm, that is more\nsecure than MD5.\n","markdown":"\n### Overview\nAn unsafe hash algorithm vulnerability occurs when using a known insecure hash\nalgorithm. A hash algorithm accepts arbitrary input and generates a hash\nvalue - a fixed-length output that can be used to verify the integrity of\ndata, such as passwords or files. An insecure hash algorithm is an\nalgorithm that an attacker can use to generate the same hash value for\ndifferent input data within a reasonable amount of time (\"hash collision\nattack\").\n\n### Vulnerable example\n```javascript\nconst md5 = require(\"md5\")\n\nresult = md5(\"message\")\n```\nIn this example the user uses the weak MD5 hash algorithm.\n\n### Remediation\n```javascript\nconst { createHash } = await import('node:crypto');\n\nconst secret = 'Hi';\nconst hash = createHash('sha256', secret)\n```\nAs a remediation the user can use a SHA256 hashing algorithm, that is more\nsecure than MD5.\n"},"defaultConfiguration":{"parameters":{"properties":{"CWE":"328"}}},"properties":{"security-severity":"6.9"}}],"version":"1.8.14"}},"invocations":[{"arguments":["/Users/erant/.jfrog/dependencies/analyzerManager/zd_scanner/scanner","scan","/var/folders/rn/2q4729rn08qgqr8yj55ny8qh0000gq/T/jfrog.cli.temp.-1725805134-643323886/Sast_1725805139/results.sarif","/var/folders/rn/2q4729rn08qgqr8yj55ny8qh0000gq/T/jfrog.cli.temp.-1725805134-643323886/Sast_1725805139/config.yaml"],"executionSuccessful":true,"workingDirectory":{"uri":"/Users/erant/Desktop/my-project-examples/npm-big"}}],"results":[{"ruleId":"js-unsafe-hash","message":{"text":"Unsafe Hash Algorithm"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:///Users/erant/Desktop/my-project-examples/npm-big/workspaces/arborist/lib/retire-path.js"},"region":{"startLine":6,"startColumn":3,"endLine":6,"endColumn":28,"snippet":{"text":"crypto.createHash('sha1')"}}},"logicalLocations":[{"fullyQualifiedName":"workspaces.arborist.lib.retire-path.^_0"}]}],"fingerprints":{"precise_sink_and_sink_function":"6bcd2bcac24ad13f27dcbaef2be2a756"}},{"ruleId":"js-insecure-random","level":"note","message":{"text":"Use of Insecure Random"},"locations":[{"physicalLocation":{"artifactLocation":{"uri":"file:///Users/erant/Desktop/my-project-examples/npm-big/mock-registry/lib/index.js"},"region":{"startLine":285,"startColumn":40,"endLine":285,"endColumn":53,"snippet":{"text":"Math.random()"}}},"logicalLocations":[{"fullyQualifiedName":"mock-registry.lib.index.MockRegistry.advisory"}]}],"fingerprints":{"precise_sink_and_sink_function":"7947db345cc87b347244330d7680764d"}}]}]